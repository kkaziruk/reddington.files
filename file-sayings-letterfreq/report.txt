// Kaza-Zack Kazirukanyo
// Report - Part 2 (Lab5)

Report on Sayings Manager Program (Part 2)

The Sayings Manager Program allows users to manage a collection of sayings by loading them from a file, displaying them, adding new sayings, searching for specific phrases, and saving the updated list to a file.

When the program starts, it prompts the user to enter the name of a startup file containing the initial sayings. If the file exists, the program reads the sayings from it and stores them in a 2D character array. If the file cannot be found, the program notifies the user and exits. Once the sayings are loaded, the program displays a menu with five options: displaying all stored sayings, adding a new saying, searching for a specific substring within the sayings, saving the sayings to a file, and quitting the program. The user interacts with the program by entering a number corresponding to their desired action. If an invalid input is entered, the program prompts the user to enter a valid choice. The program continues running until the user selects the option to quit.

Internally, the program is structured using multiple functions that handle specific tasks. The get_filename() function prompts the user for a filename, while read_sayings(FILE *fp, char sayings[][MAX]) reads sayings from the specified file into a 2D array, ensuring that any empty lines in the file are skipped. The display_sayings() function prints all currently stored sayings, and add_saying() allows the user to enter a new saying, ensuring that the input is not empty before adding it to the list. The search_sayings() function searches the stored sayings for a given substring, using case-insensitive matching so that the search is not affected by capitalization. The save_sayings() function enables the user to save the stored sayings to a new file, preserving any additions or modifications. The program also incorporates input validation to prevent errors. For instance, when the user is prompted to select a menu option, the program ensures that the input is a valid integer. If a non-numeric input is entered, the program discards the invalid input and prompts the user again. Additionally, a buffer-clearing mechanism prevents unintended behavior after scanf(), ensuring smooth user interaction.

To verify the correctness of the program, I tested it using my "startup.txt" file, which contained a predefined list of sayings. The program successfully loaded and displayed all the sayings from the file, confirming that the file-reading functionality worked as expected. I then tested the add_saying() function by entering new sayings and verifying that they appeared correctly when displayed. The program also correctly enforced the limit on the maximum number of sayings. Next, I tested the search_sayings() function by searching for different substrings in the stored sayings. The search feature worked correctly, displaying only the sayings that contained the search term.

I also tested the save_sayings() function by saving the updated list to a new file and checking that all sayings, including the ones I added, were correctly written to the file. Lastly, I tested input handling by entering invalid choices i.e numbers outside the valid range (1-5). In each case, the program displayed an appropriate error message and continued running without crashing. Through these tests, I confirmed that the program correctly performs all required functions while maintaining proper input validation and error handling.

